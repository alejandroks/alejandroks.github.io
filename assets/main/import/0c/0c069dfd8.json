[1,["abwstieFJFJakN1HRIe4jy","ecpdLyjvZBwrvm+cedCcQy","a3J/CIC+9NjJwrOOqrh4zT","3bir+GFpBHQpc/CC0fOAlt","adRYvJ60dCloZMOhm5qtbw","36QrB0eDZBL67Fo7/uNze5","4adJIsIs1Meqm8Gfz8BEyI","975ZK4GG1DHLjMEwc565rU","81DRdOYiVPH4ZV4nEOznbT","95GWx2FjpI+5gHoKkM182q","89DoVwOtdJVpBu2RvpSyws","14iWxdQWpDfqnXwTw9rAIp","ecHYoXObtFC6q27LPaqm40","61UtjzYZhFOado6fyqTuIJ","d4JP6j56NG6Ya4BK4M7wqn","e9gvvHWZpPco/sOikQvFX/","4dCw994CZLZ6m9Jozvu/Fz","151Md0TBhDUIZtrfjpZycT","f0ycnhYA1EDo0YclEQKD8M","46iEUHiWtL1riXIQbrMoPK","3frGpP90RIk77bztKf2R5U","a4uTldZuJKdogJ3QMZElOy","1ce+gLH9JHk6Gdj/4CCmTC","a5YAvZlRlJo7Wp7espyFid","00Vq4uxLxLdIdkywxVluGl","48MTT+jiRFEqbTOGxAkPoA","08R+xlrR9FkIa5aFl1dWcf","63dumNFqVDSJmy/IOBOm97","7dvN7JmDpPA4vCtHtEUOXa","d8fW5/APFIgIJ5LEO3yMED","65ed0iYnZJOYWDkj2eevU+","4eXSbzvJxN4LvFR6CTglXo","33gB9VeRpKKqcBsTUnNvxv","c6vyEjqkdEWp71yoSlIG5q","72hNwBl5VLeb95ZedD8eBk","98mY0hy3lDLZH4SSrr89Ev","05qsUbIZlJSp1TdDry3toR","832toUGyJLcr3RtOQCeY8y","75tC0fNZxLNafb2n0by9FZ","38c9AEPx9N/7kwNZCR/PN5","32kh7MmDhOoKRikMe1I/wp","8fS6oiu5lEpbdxeuLFnAQ4","ffvUwa9U1HB5LYbtCz7PVO","c9FSgt+VJMC5OOPZcWO7jz","5abHMU9BlEgpl6X27Jp4m3","2ePifx0opGfLJhs86wBaoU","6785ew+FFElo1+iTyktbaV","d29goZYm1EsKMxWe53Jbtk","9fmJdQILtJOLxKPjwGrqiV","c4IeeEr0lHroRDIUT0x7aM","5frDHxM+pDQrYUfHyufNoT","10zdmZ+dhFMJ1LohgijYl7","00yHR0VrVOC4EikR0/QnJX","39av4qQhxLXKa5VGRk9MfK","784Yu5A/NJlLW+jCiwaOND","c1rMlt5CNOdKKm8QvHrGKH","d6d+7/N9BHn7u/czasreL0","2aUDlNw0lClKnXUZvYDvkD","84/cbnaFNPx6F8XKEMVIy5","e8EcRulRpFCY9DjvkbpeI9","5bUVOVSKNG7Yh8kflkfkjM","4fIEONseFEYbMvBcGVzetg"],["node","_effectAsset","root","_mesh","_spriteFrame","_textureSetter","prefab","data","_defaultClip","_parent","targetToggleNode","mainCamera","scene","_N$data","buttonMain"],[["cc.Node",["_name","_groupIndex","_is3DNode","_id","_opacity","_active","_components","_prefab","_parent","_children","_trs","_contentSize","_eulerAngles","_color"],-3,9,4,1,2,7,5,5,5],"cc.SpriteFrame",["RelativePosition",["srToChange","type","_N$isUsr","value"],0,4],["cc.Light",["_intensity","_shadowFrustumSize","_type","_shadowDarkness","_shadowMinDepth","_range","_spotAngle","_shadowType","_shadowResolution","_shadowMaxDepth","node"],-7,1],["UiCreateHelper",["isNeedToHideOnResult","zIndex","prefab"],1,6],["cc.MeshRenderer",["_shadowCastingMode","_receiveShadows","node","_materials","_mesh"],1,1,3,6],["SideRatioDimension",["landscapeBelowSR","portraitBelowSR","portraitAboveSR","landscapeAboveSR"],3,5,5,5,5],["cc.BufferRange",["length","offset"],1],["ResizeComponent",["dimensions","_N$isScaledOnResize","_N$isChangingSizeOnResize","node","positions","relativeSize"],0,1,4,4],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Camera",["_cullingMask","_clearFlags","_depth","_orthoSize","_alignWithScreen","node","_backgroundColor"],-2,1,5],["ValueHelper",["changeEvent"],2],["cc.Sprite",["_sizeMode","node","_materials","_spriteFrame"],2,1,3,6],["72276KmGlZJZpWxJS3t1QWx",["eventToToggle","node","targetToggleNode","tutorText"],2,1,1,2],["Dimensions",["_N$isUsr","type","value"],1,4],["cc.AnimationClip",["_name","_duration","wrapMode","events","curveData"],-1,11],["b770djH3JdEGKd6W2wUb4zT",["touchSource","node"],2,1],["cc.Material",["_techniqueData"],3,11],["cc.Mesh",["_native","_vertexBundles","_primitives","_minPos","_maxPos"],2,9,9,5,5],["cc.mesh.VertexBundle",["verticesCount","data","formats"],2,4,9],["cc.mesh.VertexFormat",["name","type","num"],0],["cc.mesh.Primitive",["vertexBundleIndices","data"],2,4],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Scene",["_name","_active","_children","_anchorPoint","_trs"],1,2,5,7],["cc.Node",["_name","_is3DNode","_parent","_components","_trs"],1,1,12,7],["1f32a19heZAzqbhPEWpda9i",["node"],3,1],["ResizeComponent",["_N$isUsr","node","positions","dimensions"],2,1,4,4],["DefaultRelativePosition",[],3],["cc.Canvas",["node"],3,1],["0829bEjvz5M35fdSorBbFQu",["gameName","adType","isEndCard","node"],0,1],["6f156wuwaxNh788i3QmRN0m",["isNeedControlShowTutorial","tutorialDelay","inputTypeOnResultRedirect","touchSourceRedirect","tutorialCancelSource","node","mainCamera"],-2,1,1],["593bcF0NyZAd7jb2DzgKb4F",["node","cameraSetups"],3,1,9],["CameraSetupHelper",["followOffset","followRotation","zoom","_N$target"],3,5,5,4,1],["CameraZoomHelper",["landscape","portrait"],1],["cf58dh0u2dJFbr9SmWD7PIh",["node","uiElements"],3,1,9],["my.PoolManager",["node"],3,1],["4ac372RldxCW5u97uzM3P9H",["isPhysicsEnabled","isDebugPhysics","isColliderEnabled","isColliderDebug","isPhysics3DEnabled","is3DAccumulator","node"],-3,1],["1226euyW2FAKZFI7f4VowQS",["_convertGameObjectType","_prefabs","node"],1,1],["8bacaIc0xxD7L2RC2wQamct",["_N$dataType","_convertDataType","node","_data","_N$data"],1,1,12,6],["7283emJ2UxKubn1UbXdTYyw",["_convertValueType","node","_values"],2,1,9],["1e00e2udMVFQLaNYvUAZEAR",["delayCompete","delayStartGame","startLevel","_convertLevelType","node","_levels"],-1,1,9],["Level",["dataType","isFake"],1],["cc.Prefab",["_name"],2],["SideRatioRelativePosition",["portraitBelowSR","landscapeBelowSR","portraitAboveSR","landscapeAboveSR"],3,5,5,5,5],["cc.AnimationClip",["_name","_duration","wrapMode","curveData"],-1],["cc.JsonAsset",["_name","json"],1],["5a193rjU8FLhb0Dxfg9agF7",["opacitySpeedLoose","node","button"],2,1,4],["Button",["buttonMain"],3,1],["949570fxA1MuLfwaPhZFbG2",["_N$isActiveElement","isAlwaysShow","node"],1,1],["cc.Label",["_string","_styleFlags","node","_materials"],1,1,3],["cc.EffectAsset",["_name","shaders","techniques"],0],["d21313NpVdKCZcHl6FUWlsx",["isOneTapGame","node"],2,1],["RelativeSize",["srToChange","value"],2,4],["DefaultRelativeSize",["portrait","landscape"],3,5,5],["f5da8lxRuJOfZkcK2AsiZON",["node"],3,1]],[[21,0,1,2,4],[7,1,0,3],[9,0,1,2],[20,0,1,2,2],[22,0,1,2],[18,0,1],[9,1,1],[19,0,1,2,3,4,2],[7,0,2],[0,0,2,8,6,7,10,12,3],[0,0,3,8,6,3],[43,0,2],[27,0,1,2,3,2],[2,2,3,2],[13,1,2,3,1],[44,0,1,2,3,1],[28,1],[5,2,3,4,1],[15,0,2,2],[8,0,1,3,4,3],[4,0,1,2,3],[6,1,0,2,3,1],[0,0,2,8,9,7,3],[0,0,2,8,6,7,3],[0,0,9,6,7,11,2],[0,0,8,9,7,2],[10,1,2,3,1],[5,0,2,3,4,2],[12,0,2],[12,1],[13,0,1,2,3,2],[0,0,2,8,9,7,10,12,3],[0,0,8,6,7,11,10,2],[0,0,1,8,6,7,11,3],[2,0,3,2],[2,1,3,2],[4,2,1],[42,0,1,3],[16,0,1,2,4,4],[46,0,1,3],[49,0,1,2,3],[17,0,1,2],[50,0,1,2,3,3],[23,0,1,3],[24,0,1,2,3,4,3],[0,0,3,8,9,6,3],[0,0,2,8,9,6,7,10,3],[0,0,3,8,9,6,11,10,3],[0,0,2,8,9,7,10,3],[0,0,1,3,8,9,6,4],[0,0,1,8,6,10,3],[0,0,2,8,6,7,10,3],[0,0,4,8,6,11,10,12,3],[0,0,9,6,7,2],[0,0,8,9,7,10,2],[0,0,4,8,6,7,13,11,10,3],[0,0,8,6,7,11,10,12,2],[0,0,1,9,6,7,3],[0,0,1,8,9,6,7,11,10,3],[0,0,9,6,7,11,10,2],[0,0,8,6,7,11,2],[0,0,1,9,6,7,11,10,3],[0,0,1,9,6,7,11,3],[0,0,8,9,6,7,11,2],[0,0,6,7,11,10,2],[0,0,5,4,1,6,7,13,11,5],[25,0,1,2,3,4,3],[26,0,1],[8,0,1,2,3,4,5,4],[2,1,0,3,3],[10,0,1,2,3,2],[29,0,1],[30,0,1,2,3,4],[31,0,1,2,3,4,5,6,6],[32,0,1,1],[33,0,1,2,3,1],[34,0,1,3],[35,0,1,1],[4,0,2,2],[11,0,1,2,3,4,5,6,6],[11,0,5,6,2],[5,1,0,2,3,4,3],[3,2,0,10,3],[3,0,1,10,3],[3,0,3,4,1,10,5],[3,2,0,5,6,7,8,3,9,1,10,10],[36,0,1],[37,0,1,2,3,4,5,6,7],[38,0,1,2,3],[39,0,1,2,3,4,3],[40,0,1,2,2],[41,0,1,2,3,4,5,5],[14,0,1,2,3,2],[14,0,1,2,2],[15,1,0,2,3],[6,1,0,2,1],[6,0,3,1],[16,0,1,2,3,4,5],[45,0,1,2,3,5],[47,0,1,2,2],[48,0,1],[17,1,1],[51,0,1,2,4],[52,0,1,2],[53,0,1,2],[54,0,1,1],[55,0,1]],[[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4288845150]]]]]],0,0,[0],[1],[0]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4288203519]]]]]],0,0,[0],[1],[0]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4279578021]]]]]],0,0,[0],[1],[0]],[[[7,".bin",[[3,20,[8,640],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2]]],[3,16,[1,700,512],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2]]]],[[4,[0],[1,640,60]],[4,[1],[1,1212,48]]],[1,-1.12797403335571,-0.248937606811523,-0.157197952270508],[1,1.12797403335571,0.248937606811523,0.157197952270508]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4278591590]]]]]],0,0,[0],[1],[0]],[[[43,"Main",null],[44,"New Node",false,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[45,"World","0fWOOTn7lIxJwfRHs8XpxJ",1,[-13,-14,-15,-16,-17,-18],[[67,-11],[19,null,false,-12,[34,1.35,[16]]]]],[22,"Light",true,2,[-20,-21,-22,-23],[6,-19]],[46,"Box",true,2,[-26],[[70,true,-25,[14],13]],[6,-24],[7.49,0,5.789,0,0,0,1,1,1,1]],[22,"Holder",true,4,[-27,-28,-29,-30,-31],[2,"11yAWaYYZAn6lSMAGw2wSb",4]],[47,"Canvas","275mG/UnlF3IS8kdLn2uGa",1,[-33,-34],[[71,-32]],[5,960,640],[480,320,0,0,0,0,1,1,1,1]],[31,"Shalve",true,2,[-36],[6,-35],[-1.691,3.083,0.364,0,0.7071067811865475,0,0.7071067811865476,0.4,1,1],[1,0,90,0]],[22,"Room",true,2,[-38],[6,-37]],[31,"RootNode",true,2,[-40],[6,-39],[0.189,1.496,-1.58,0,-0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,-90,0]],[48,"RootNode",true,2,[-42],[6,-41],[0,0.181,0,0,0,0,1,1,1,1]],[10,"GameManager","4e3V2vyQtE66z46pz3FbFL",1,[[72,"HomeUnpacking","unity",true,-43],[73,false,15,1,[0],[9,10],-45,-44]]],[66,"Main Camera",true,6,[[-46,[74,-47,[[75,[1,0,0,650],[1,-45,35,0],[76,55,35],2]]]],1,4],[0,0,380.1851522613686,0,0,0,1,1,1,1]],[49,"UiManager",1,"02NrKjlbdL55lHE0aoXG0R",1,[-49],[[77,-48,[[20,true,4,42],[20,true,8,43],[20,true,5,44],[20,true,1,45],[78,true,46],[36,47],[36,48]]]]],[79,-3,7,-1,260,false,12,[4,4293824336]],[50,"Ui Camera",1,6,[[80,2,-50,[4,4294967295]]],[0,0,362.8646441856798,0,0,0,1,1,1,1]],[23,"Shelve_03",true,7,[[17,-51,[0,1],2]],[2,"Shelve_03",7]],[23,"AmbientLight",true,3,[[82,3,0.5,-52]],[2,"9atBYqxQBJaolR+3ip28kt",3]],[9,"DirectionalLightTop",true,3,[[83,0.7,2048,-53]],[2,"e5WlCt55hHmZ6+LwwYKxaf",3],[227.369,240,0,-0.7071067811865475,0,0,0.7071067811865476,1,1,1],[1,-90,0,0]],[9,"DirectionalLightFrontRight",true,3,[[84,0.3,10,3000,2048,-54]],[2,"b8pqqCMIxM5pLKSntvjc8U",3],[440.707,307.76,252.221,-0.3558601742492257,0.08090236309004772,0.030939727584455966,0.9305165647567787,1,1,1],[1,-41.857,9.938,0]],[9,"SpotLight",true,3,[[85,2,0.4,3000000,30,2,2024,2.3,200,2048,-55]],[2,"0aofZdbk5LK6EfFU+5NULF",3],[0.678,73.066,84.533,-0.3826834323650898,0,0,0.9238795325112867,1,1,1],[1,-45,0,0]],[51,"Box_00",true,5,[[27,1,-56,[3],4]],[2,"c08IFeEmdEx6y6loAgYCQd",4],[-4.37,0,-2.368,0,0,0,1,1,1,1]],[9,"Box_03",true,5,[[17,-57,[5],6]],[2,"5ce7jw56xB+5Wd2C0NvY82",4],[-4.37,0.342,-0.953,-0.6560590289905073,0,0,0.754709580222772,1,1,1],[1,-82,0,0]],[9,"Box_01",true,5,[[17,-58,[7],8]],[2,"6f9JHcFuNHvrqQUDQVOF/k",4],[-2.888,0.493,-2.368,0,0,0.7071067811865475,0.7071067811865476,1,1,1],[1,0,0,90]],[9,"Box_02",true,5,[[17,-59,[9],10]],[2,"43/oeweKlLxK7vhR8zES3T",4],[-5.799,0.52,-2.368,0,0,-0.7071067811865475,0.7071067811865476,1,1,1],[1,0,0,-90]],[9,"Box_04",true,5,[[17,-60,[11],12]],[2,"ae4tn+qzZCbaEmu4DIqLuk",4],[-4.37,0.416,-3.733,0.6626200482157375,0,0,0.7489557207890021,1,1,1],[1,83,0,0]],[23,"interior.1204",true,8,[[81,true,1,-61,[15,16,17,18],19]],[2,"interior.1204",8]],[9,"interior.840",true,9,[[27,1,-62,[20,21,22,23,24,25,26,27,28,29,30,31,32],33]],[2,"interior.840",9],[0,0.964715540409088,0,8.146033536604618e-8,0,0,0.9999999999999967,100,100,100],[1,0.000009334666828389458,0,0]],[9,"Render",true,10,[[27,1,-63,[34,35],36]],[2,"interior.195",10],[0,0,0,8.146033536604618e-8,0,0,0.9999999999999967,100,100,100],[1,0.000009334666828389458,0,0]],[10,"PoolManager","e2hWnWq/5BWoQ4zFWOgp8f",1,[[86,-64]]],[10,"PhysicManager","c8g1lREQFAhaMbgK/IkagO",1,[[87,false,false,false,false,true,true,-65]]],[10,"GameObjectManager","e8NI2u5CNDh4LLjP+EHDKf",1,[[88,[21,23,22,24,8,4,25,20],[null,null,null,null,null,null,null,null],-66]]],[10,"DataDictionary","afDpKrAsFPaK9k96Z8iNbq",1,[[89,156,[0,153,154,156],-67,[[null,37,null,38],0,6,0,6],39]]],[10,"DictionaryValue","65qs8QtSJM9YFjJ0QynjdH",1,[[90,[8771,8772,8773,9772,9773,9934],-68,[[28,390],[28,383],[28,382],[29],[29],[29]]]]],[52,"Gradient",90,13,[[14,-69,[40],41]],[5,1334,591],[507,168,0,0,0,1,6.123233995736766e-17,1.3,1.3,1],[1,0,0,180]],[10,"LevelManager","58gxovbEVErLrTi6OxYEg+",1,[[91,0.2,0,1,[1,2],-70,[[37,153,true],[37,154,true]]]]]],0,[0,-1,11,0,-2,29,0,-3,30,0,-4,31,0,-5,32,0,-6,33,0,-7,6,0,-8,2,0,-9,13,0,-10,35,0,0,2,0,0,2,0,-1,7,0,-2,3,0,-3,4,0,-4,8,0,-5,9,0,-6,10,0,2,3,0,-1,17,0,-2,18,0,-3,19,0,-4,20,0,2,4,0,0,4,0,-1,5,0,-1,21,0,-2,22,0,-3,23,0,-4,24,0,-5,25,0,0,6,0,-1,12,0,-2,15,0,2,7,0,-1,16,0,2,8,0,-1,26,0,2,9,0,-1,27,0,2,10,0,-1,28,0,0,11,0,11,14,0,0,11,0,-1,14,0,0,12,0,0,13,0,-1,34,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,12,1,70],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,3,-1,3,-1,3,-1,3,-1,3,-1,3,8,-1,-1,-2,-3,-4,3,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,3,-1,-2,3,-2,-4,13,-1,4,6,6,6,6,6,6,6],[9,10,11,2,12,2,13,2,14,2,15,2,16,3,3,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,4,4,1,40,41,42,43,44,45,46,47]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4294967295]]]]]],0,0,[0],[1],[0]],[[[11,"Tutorial"],[24,"Tutorial",[-7],[[92,60,-4,-3,[-2]],[26,-5,[5],4],[12,true,-6,[13,true,[15,[0,0.48,0.2],[0,0.49,0.03],[0,0.5,0.25],[0,0.49,0.03]]],[18,true,[95,[5,0.4,0.4],[5,0.4,0.4],[5,0.45,0.45]]]]],[6,-1],[5,400,400]],[25,"Holder",1,[-8],[2,"c4aMmmcpRMoaX3orOYWeSE",1]],[53,"HolderDotHand",[-10,-11],[[19,null,false,-9,[69,11,1.35,[16]]]],[2,"fe2NKHh+xDE6mHGtG75U9P",1]],[54,"HandHolder",2,[3],[2,"7buixiMs9GvI/1sGau3jT7",1],[201.928,120.61,0,0,0,0,1,1,1,1]],[55,"Dot",180,3,[[14,-12,[0],1]],[2,"7fipNusYVPbaogKzqIlTZb",1],[4,4278190080],[5,38,38],[-72.968,58.713,0,0,0,0,1,0.2,0.2,0.2]],[56,"Hand",3,[[14,-13,[2],3]],[2,"93FANpUMxGfZWCKzWxN5MS",1],[5,232,410],[0,0,0,0,0,0.3420201433256687,0.9396926207859084,0.5,0.5,0.5],[1,0,0,40]]],0,[0,2,1,0,-1,2,0,10,2,0,0,1,0,0,1,0,0,1,0,-1,2,0,-1,4,0,0,3,0,-1,5,0,-2,6,0,0,5,0,0,6,0,7,1,3,9,4,13],[0,0,0,0,0,0],[-1,4,-1,4,8,-1],[1,48,1,49,5,5]],[[{"name":"photodraw","rect":[0,0,1334,591],"offset":[0,27],"originalSize":[1334,645],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[50]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4294967295]]]]]],0,0,[0],[1],[0]],[[[97,"tutorial_move",1.3333333333333333,22,[{"frame":1.3333333333333333,"func":"onAnimationEvent","params":[]}],[{},"paths",11,[{},"Holder/HandHolder",11,[{},"props",11,[{},"scale",12,[[[{"frame":0},"value",8,[0,1,1]],[{"frame":0.5},"value",8,[0,0.7,0.7]],[{"frame":1},"value",8,[0,1,1]]],11,11,11]]],"Holder/HandHolder/HolderDotHand/Dot",11,[{"comps":{}},"props",11,[{},"scale",12,[[[{"frame":0},"value",8,[0,0.2,0.2]],[{"frame":0.5},"value",8,[0,1.5,1.5]],[{"frame":1},"value",8,[0,0.2,0.2]]],11,11,11]]]]]]],0,0,[],[],[]],[[[39,"level1_fig",{"cameraBox":{"type":"CameraBoxLevel1"},"value":[{"type":"Words","count":1}],"world":{"objects":[{"type":"Background","settings":[{"position":{"x":0,"y":470},"scale":{"x":1,"y":1}},{"zIndex":-1,"position":{"x":0,"y":780},"scale":{"x":2,"y":2}}]},{"type":"InputAny","settings":[{"position":{"x":0,"y":0}}]},{"type":"Word","settings":[{"position":{"x":0,"y":270},"scale":{"x":1,"y":1},"specify":{"text":"365 days","fontSize":40,"isHidden":false,"textPosition":{"x":-200,"y":0},"arrayWords":["Y:12:Y","Null:6:E","Null:10:A","R:7:R"]}},{"position":{"x":0,"y":125},"scale":{"x":1,"y":1},"specify":{"text":"(plural) Regions or fields of study","fontSize":38,"isHidden":false,"textPosition":{"x":-200,"y":0},"arrayWords":["Null:10:A","R:7:R","Null:9:E","Null:10:A","Null:11:S"]}},{"position":{"x":0,"y":-50},"scale":{"x":1,"y":1},"specify":{"text":"(syn.) When something comes up or ascends","fontSize":35,"isHidden":true,"textPosition":{"x":-200,"y":0},"arrayWords":["Null:10:A","R:7:R","Null:3:I","Null:4:S","Null:6:E","Null:4:S"]}},{"position":{"x":0,"y":-260},"scale":{"x":1,"y":1},"specify":{"text":"A different set of something or a collection of different things","fontSize":28,"isHidden":true,"textPosition":{"x":-200,"y":0},"arrayWords":["Null:5:V","Null:10:A","R:7:R","Null:1:I","Null:6:E","Null:2:T"]}}]},{"type":"MainWord","settings":[{"position":{"x":0,"y":420},"scale":{"x":1,"y":1},"specify":{"isHidden":false,"arrayWords":[["Null:1:A","Null:2:A"],["Null:3:A","Null:4:A"],["Null:5:A","Null:6:A","R:7:R","Null:8:A"],["Null:9:A","Null:10:A","Null:11:A","Y:12:Y"]]}}]}]},"effect":[]}]],0,0,[],[],[]],[[{"name":"btn_base","rect":[2,2,331,98],"offset":[0,0],"originalSize":[335,102],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[51]],[[[98,"unpack_box",1,2,{"paths":{"Holder":{"props":{"y":[{"frame":0,"value":0,"curve":"cubicOut"},{"frame":0.5,"value":0.5,"curve":"cubicIn"},{"frame":1,"value":0}]}}}}]],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4280229721]]]]]],0,0,[0],[1],[0]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4279768594]]]]]],0,0,[0],[1],[0]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4285024568]]]]]],0,0,[0],[1],[0]],[[[38,"result_button_idle",1.5,2,[{},"paths",11,[{},"Holder",11,[{},"props",11,[{},"scale",12,[[[{"frame":0,"curve":"quadInOut"},"value",8,[0,1,1]],[{"frame":0.3333333333333333,"curve":"linear"},"value",8,[0,1.1,1.1]],[{"frame":0.6666666666666666,"curve":"linear"},"value",8,[0,1.15,1]],[{"frame":1.1666666666666667,"curve":"quadInOut"},"value",8,[0,1.2,1.2]],[{"frame":1.5},"value",8,[0,1,1]]],11,11,11,11,11]]]]]]],0,0,[],[],[]],[[[7,".bin",[[3,30,[8,1200],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2],[0,"a_uv1",5126,2]]]],[[4,[0],[1,1200,96]]],[1,-0.454858690500259,0.978292226791382,-0.451985538005829],[1,0.482719093561172,1.37205946445465,-0.436617493629456]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4278190859]]]]]],0,0,[0],[1],[0]],[[{"name":"pixel","rect":[0,0,1,1],"offset":[0,0],"originalSize":[1,1],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[52]],[[[11,"Result"],[57,"Result",1,[-5,-6],[[99,2,-3,[100,-2]],[19,null,false,-4,[35,11,[16]]]],[6,-1]],[58,"IngameLogo",1,1,[-10],[[40,true,true,-8],[12,true,-9,[13,true,[15,[0,0.15,0.07],[0,0.15,0.1],[0,0.21,0.07],[0,0.13,0.1]]],[18,true,[21,[5,0.27,0.27],[5,0.2,0.2],[5,0.4,0.4],[5,0.15,0.15]]]]],[2,"12WjxDWr9CDKD94HoNPwYM",-7],[5,240,80],[-652,85,0,0,0,0,1,1,1,1]],[24,"Button",[-13],[[12,true,-11,[13,true,[15,[0,0.76,0.07],[0,0.85,0.12],[0,0.76,0.07],[0,0.85,0.12]]],[18,true,[21,[5,0.25,0.25],[5,0.14,0.14],[5,0.4,0.4],[5,0.15,0.15]]]],[26,-12,[4],3]],[2,"e9XQCDIDJAppsQPlpIfuWO",1],[5,500,200]],[24,"Render",[-16],[[30,0,-14,[1],2],[41,1,-15]],[2,"1cpBOy0KpIcKlBx6DfCyyg",1],[5,440,150]],[25,"Holder",1,[3],[2,"04wxW50flKKKNJjrFfiWy3",1]],[25,"Holder",3,[4],[2,"7dqJWm6IdGLbRRHBnZeLNK",1]],[32,"Text",4,[[42,"DOWNLOAD",1,-17,[0]]],[2,"43aYlFKv1F0bPsLiPzPK+m",1],[5,239.96,50.4],[0,0,0,0,0,0,1,1.2,1.2,1]],[33,"Render",1,2,[[14,-18,[5],6]],[2,"bb5Q6zfrVAq4z+743EDGrM",2],[5,210,80]]],0,[0,2,1,0,14,3,0,0,1,0,0,1,0,-1,5,0,-2,2,0,2,2,0,0,2,0,0,2,0,-1,8,0,0,3,0,0,3,0,-1,6,0,0,4,0,0,4,0,-1,7,0,0,7,0,0,8,0,7,1,3,9,5,4,9,6,18],[0,0,0,0,0,0,0],[-1,-1,4,8,-1,-1,4],[1,1,53,6,6,1,7]],[[{"name":"Btn_green","rect":[0,0,646,254],"offset":[0,0],"originalSize":[646,254],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[54]],[[[7,".bin",[[3,30,[8,1200],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2],[0,"a_uv1",5126,2]]]],[[4,[0],[1,1200,96]]],[1,-0.453364104032516,0.975222527980804,0.5116206407547],[1,0.485766351222992,1.36528503894806,0.526988685131073]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4280161552]]]]]],0,0,[0],[1],[0]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4278386853]]]]]],0,0,[0],[1],[0]],[[[11,"Text"],[59,"Text",[-6],[[93,60,-3,-2],[12,true,-4,[13,true,[15,[0,0.5,0.15],[0,0.8,0.5],[0,0.5,0.15],[0,0.8,0.5]]],[18,true,[96,[5,0.25,0.25],[5,0.25,0.25]]]],[26,-5,[3],2]],[6,-1],[5,600,150],[0,205.2,0,0,0,0,1,1,1,1]],[60,"Render",1,[[14,-7,[0],1]],[2,"354A3LgPROLJl7NsC3a5Aq",1],[5,599,93]]],0,[0,2,1,0,10,2,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,7,1,7],[0,0,0,0],[-1,4,8,-1],[1,55,8,8]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4278584323]]]]]],0,0,[0],[1],[0]],[[[7,".bin",[[3,20,[8,480],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,64,[1,540,1536],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]]],[[4,[0],[1,480,60]],[4,[1],[1,2076,192]]],[1,-0.00402201944962144,0,-0.00521752284839749],[1,0.00412971572950482,0.00558845466002822,0.00532518932595849]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4293412214]]]]]],0,0,[0],[1],[0]],[[[38,"unpack_text_idle",1.5,2,[{},"paths",11,[{},"Render",11,[{},"props",11,[{},"scale",12,[[[{"frame":0},"value",8,[0,1,1]],[{"frame":0.5},"value",8,[0,1.15,1]],[{"frame":1},"value",8,[0,1,1.15]],[{"frame":1.5},"value",8,[0,1,1]]],11,11,11,11]]]]]]],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4280883737]]]]]],0,0,[0],[1],[0]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4285609932]]]]]],0,0,[0],[1],[0]],[[[11,"IngameLogo"],[61,"IngameLogo",1,[-4],[[40,true,true,-2],[12,true,-3,[13,true,[15,[0,0.15,0.07],[0,0.15,0.1],[0,0.15,0.04],[0,0.13,0.1]]],[18,true,[21,[5,0.27,0.27],[5,0.2,0.2],[5,0.25,0.25],[5,0.15,0.15]]]]],[6,-1],[5,240,80],[-652,85,0,0,0,0,1,1,1,1]],[33,"Render",1,1,[[14,-5,[0],1]],[2,"bb5Q6zfrVAq4z+743EDGrM",1],[5,210,80]]],0,[0,2,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,7,1,5],[0,0],[-1,4],[1,7]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4291611852]]]]]],0,0,[0],[1],[0]],[[{"name":"img_logo_figgerits","rect":[30,10,210,80],"offset":[10,0],"originalSize":[250,100],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[56]],[[[7,".bin",[[3,168,[8,4032],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,20,[1,4536,480],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,72,[1,5076,1728],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,40,[1,7020,960],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,32,[1,8100,768],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,4,[1,8964,96],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,4,[1,9072,96],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,32,[1,9180,768],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,56,[1,10068,1344],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,4,[1,11628,96],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,32,[1,11736,768],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,98,[1,12600,2352],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]],[3,44,[1,15252,1056],[[0,"a_normal",5126,3],[0,"a_position",5126,3]]]],[[4,[0],[1,4032,504]],[4,[1],[1,5016,60]],[4,[2],[1,6804,216]],[4,[3],[1,7980,120]],[4,[4],[1,8868,96]],[4,[5],[1,9060,12]],[4,[6],[1,9168,12]],[4,[7],[1,9948,120]],[4,[8],[1,11412,216]],[4,[9],[1,11724,12]],[4,[10],[1,12504,96]],[4,[11],[1,14952,300]],[4,[12],[1,16308,168]]],[1,-0.00221289624460042,-0.0108596421778202,-0.0156187815591693],[1,0.00221289624460042,0.0108596421778202,0.0156187815591693]],-1],0,0,[],[],[]],[[{"name":"dot","rect":[1,1,38,38],"offset":[0,0],"originalSize":[40,40],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[57]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4284064974]]]]]],0,0,[0],[1],[0]],[[[7,".bin",[[3,4,[8,128],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2]]],[3,4,[1,140,128],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2]]],[3,32,[1,280,1024],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2]]],[3,4,[1,1400,128],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2]]]],[[4,[0],[1,128,12]],[4,[1],[1,268,12]],[4,[2],[1,1304,96]],[4,[3],[1,1528,12]]],[1,-2,0,-1.99999904632568],[1,2,4.00000190734863,2.00000095367432]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4281371045]]]]]],0,0,[0],[1],[0]],[[[102,"builtin-phong",[{"hash":3560892936,"record":null,"name":"builtin-phong|phong-vs|phong-fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"builtin-phong|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"builtin-phong|phong-vs|phong-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"builtin-phong|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[[39,"keyboard",{"keys":["Q","W","E","R","T","Y","U","I","O","P","A","S","D","F","G","H","J","K","L","Z","X","C","V","B","N","M","delete"],"rows":[10,9,8]}]],0,0,[],[],[]],[[{"name":"unpuck","rect":[0,114,599,93],"offset":[-0.5,14.5],"originalSize":[600,350],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[58]],[[{"name":"heand_01","rect":[17,66,232,410],"offset":[-8.5,-32.5],"originalSize":[283,477],"capInsets":[0,0,0,0]}],[1],0,[0],[5],[59]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4278190859]]]]]],0,0,[0],[1],[0]],[[[11,"IngameButton"],[62,"IngameButton",1,[-5],[[12,true,-2,[13,true,[15,[0,0.82,0.07],[0,0.9,0.1],[0,0.82,0.04],[0,0.87,0.1]]],[94,4,true,[21,[5,0.3,0.3],[5,0.34,0.34],[5,0.23,0.23],[5,0.4,0.4]]]],[103,true,-3],[41,1,-4]],[6,-1],[5,300,100]],[63,"Render",1,[-7],[[30,0,-6,[1],2]],[2,"c9h+s7YGRF2KUvBRzm1Mei",1],[5,440,150]],[32,"Text",2,[[42,"DOWNLOAD",1,-8,[0]]],[2,"a47j48x9hJaY5AJ7rktEgE",1],[5,239.96,50.4],[0,0,0,0,0,0,1,1.2,1.2,1]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,-1,3,0,0,3,0,7,1,8],[0,0,0],[-1,-1,4],[1,1,60]],[[[11,"InputCharacterAny"],[64,"InputCharacterAny",[[101,-2],[68,null,false,true,-3,[35,11,[16]],[104,1.35,[105,[5,5000,5000],[5,5000,5000]]]]],[6,-1],[5,1,1],[-670,0,0,0,0,0,1,1,1,1]]],0,[0,2,1,0,0,1,0,0,1,0,7,1,3],[],[],[]],[[[7,".bin",[[3,44,[8,1760],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2],[0,"a_uv1",5126,2]]]],[[4,[0],[1,1760,144]]],[1,0.486769258975983,0.977919220924377,-0.444260329008102],[1,0.503498911857605,1.45392441749573,0.521436333656311]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4282402213]]]]]],0,0,[0],[1],[0]],[[[7,".bin",[[3,44,[8,1760],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2],[0,"a_uv1",5126,2]]]],[[4,[0],[1,1760,144]]],[1,-0.48121902346611,0.974320948123932,-0.444260716438293],[1,-0.456875294446945,1.45032608509064,0.521435916423798]],-1],0,0,[],[],[]],[[[7,".bin",[[3,117,[8,4680],[[0,"a_normal",5126,3],[0,"a_position",5126,3],[0,"a_uv0",5126,2],[0,"a_uv1",5126,2]]]],[[4,[0],[1,4680,408]]],[1,-0.474886804819107,0.194173648953438,-0.452703922986984],[1,0.504188001155853,0.980779826641083,0.526372969150543]],-1],0,0,[],[],[]],[[[5,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4280237145]]]]]],0,0,[0],[1],[0]],[[[11,"FlashLight"],[65,"FlashLight",false,0,1,[[106,-2],[30,0,-3,[0],1],[19,null,false,-4,[34,1.35,[16]]]],[6,-1],[4,4278190080],[5,5000,5000]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,7,1,4],[0,0],[-1,4],[1,61]]]]